# This GitHub Actions workflow is for Cert Tracker CI with Maven.
# It automates the build and testing process for a Java project using Maven.
# The workflow includes steps to set up MySQL, JDK 17, build the project, 
# and generate test reports.

name: Cert Tracker CI with Maven

on:
  push:
    # Trigger the workflow on pushes to any branch.
    branches:
      - '*' 
  pull_request:
    # Trigger the workflow on pull requests to any branch.
    branches:
      - '*'
jobs:
  # Define a job called "build".
  backend-ci:
    services:
      mysql:
        # Use MySQL 5.7 as a service container.
        image: mysql:5.7
        # Set environment variables for the MySQL service container.
        env:
          MYSQL_ROOT_PASSWORD: ${{ secrets.MYSQL_ROOT_PASSWORD }}
          MYSQL_DATABASE: certificatetracker
          MYSQL_USER: devops
          MYSQL_PASSWORD: ${{ secrets.MYSQL_PASSWORD }}
          
        # Configure health checks for the MySQL service container.
        options: >-
          --health-cmd "mysqladmin ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
          
        # Map port 3306 from the MySQL service container to the host.
        ports:
          - 3306:3306
          
    # Define permissions for the job (GitHub Actions permissions).
    permissions:
      contents: read
      actions: read
      checks: write

    # Run the job on an Ubuntu latest runner (virtual machine).  
    runs-on: ubuntu-latest

    steps:
    # Checkout the code from the repository.
    - name: checkout code
      uses: actions/checkout@v3
      
    # Set up JDK 17 using the Temurin distribution and cache Maven.
    - name: Set up JDK 17
      uses: actions/setup-java@v3
      with:
        java-version: '17'
        distribution: 'temurin'
        cache: maven
        
    - name: Wait for MySQL to start
      run: |
        # Wait for MySQL to start by attempting to connect to it.
        for i in {1..30}; do
          echo "Checking MySQL connection attempt $i..."
          mysql -h 127.0.0.1 -P 3306 -u root -p"${{ secrets.MYSQL_ROOT_PASSWORD }}" -e "SELECT 1" && break
          sleep 10
        done
      
    # Build and test the project using Maven.
    - name: Build and Test with Maven
      run: mvn clean verify 
      
    # Generate a test report for Spring Boot tests using the specified parameters.
    - name: Test Report
      uses: dorny/test-reporter@v1
      if: success() || failure()
      with:
        name: Spring Boot Tests
        path: target/surefire-reports/*.xml
        reporter: java-junit
        fail-on-error: true
      

    
    
    

